<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>STL - 分类 - Bing's Blog</title><link>https://imcbc.cn/categories/stl/</link><description>STL - 分类 - Bing's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>jack_cbc@163.com (bing)</managingEditor><webMaster>jack_cbc@163.com (bing)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 13 Jul 2022 19:27:34 +0800</lastBuildDate><atom:link href="https://imcbc.cn/categories/stl/" rel="self" type="application/rss+xml"/><item><title>STL-tuple源码阅读</title><link>https://imcbc.cn/202207/cpp-stl-tuple/</link><pubDate>Wed, 13 Jul 2022 19:27:34 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202207/cpp-stl-tuple/</guid><description><![CDATA[<p><code>std::tuple</code>是C++11开始支持的一个编译期确定长度的, 可支持任意参数类型的容器, 相当于是<code>std::pair</code>的扩展, 平常只使用过它, 却没有了解其实现原理.</p>]]></description></item><item><title>STL-any源码阅读</title><link>https://imcbc.cn/202207/cpp-stl-any/</link><pubDate>Wed, 06 Jul 2022 17:10:51 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202207/cpp-stl-any/</guid><description><![CDATA[<p><code>std::any</code>是C++17定义的支持任意可拷贝类型的标准容器. 描述如下:</p>
<blockquote>
<p>The class any describes a type-safe container for single values of any copy constructible type.</p>
</blockquote>]]></description></item><item><title>STL-智能指针三剑客源码阅读</title><link>https://imcbc.cn/202112/stl-smartpointers/</link><pubDate>Wed, 29 Dec 2021 15:43:03 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202112/stl-smartpointers/</guid><description>&lt;p>智能指针出现很多, 但是自己用得很少. 本文从源码层面来学习智能指针, 学习是怎么实现的, 以及如此实现可以实现如何的功能.&lt;/p></description></item><item><title>STL-迭代器</title><link>https://imcbc.cn/202103/cpp-what-iterator/</link><pubDate>Thu, 04 Mar 2021 14:34:22 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202103/cpp-what-iterator/</guid><description>&lt;h2 id="问题">问题&lt;/h2>
&lt;p>先来看一段代码:&lt;/p></description></item><item><title>C++容器操作</title><link>https://imcbc.cn/202101/cpp-erase-clear/</link><pubDate>Fri, 08 Jan 2021 10:14:08 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202101/cpp-erase-clear/</guid><description>&lt;h2 id="问题">问题&lt;/h2>
&lt;p>容器存指针，调用erase、clear是否会调用元素的析构函数？&lt;/p></description></item><item><title>C++解包函数tie的用法</title><link>https://imcbc.cn/202101/cpp-func-tie/</link><pubDate>Tue, 05 Jan 2021 14:03:48 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202101/cpp-func-tie/</guid><description><![CDATA[<h2 id="tie">tie</h2>
<p>std::tie会把变量打包成一个tuple(pair)，实现变量赋值；这个行为叫做<strong>解包</strong></p>]]></description></item></channel></rss>