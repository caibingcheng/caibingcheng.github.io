<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Cpp - 标签 - Bing's Blog</title><link>https://imcbc.cn/tags/cpp/</link><description>Cpp - 标签 - Bing's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>jack_cbc@163.com (bing)</managingEditor><webMaster>jack_cbc@163.com (bing)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 20 Nov 2022 11:38:03 +0800</lastBuildDate><atom:link href="https://imcbc.cn/tags/cpp/" rel="self" type="application/rss+xml"/><item><title>tagged-pointer-让指针包含更多信息</title><link>https://imcbc.cn/202211/tagged-pointer/</link><pubDate>Sun, 20 Nov 2022 11:38:03 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202211/tagged-pointer/</guid><description>&lt;p>在C++中，我们可以指定类型在内存中的对齐方式。比如使用&lt;code> __attribute__((aligned(4)))&lt;/code>，使得使用该类型的变量以4Byte方式对齐。一般讨论内存对齐的作用主要有两点：&lt;/p></description></item><item><title>《现代C++白皮书》一周目读后感</title><link>https://imcbc.cn/202209/cpp_hopl4_reading/</link><pubDate>Tue, 27 Sep 2022 22:06:08 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202209/cpp_hopl4_reading/</guid><description>&lt;p>最近在读C++之父 Bjarne Stroustrup 关于 HOPL4（History of Programming Language，约十五年举办一次）会议的论文，以下称白皮书。主要讲述的是C++98到C++20的语言发展历史，包括一些语言特性和基础库的由来和相关讨论，以及为什么有些是语言特性，有些变成了基础库。了解语言发展历史，有助于理解语言设计的核心思想。&lt;/p></description></item><item><title>STL-tuple源码阅读</title><link>https://imcbc.cn/202207/cpp-stl-tuple/</link><pubDate>Wed, 13 Jul 2022 19:27:34 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202207/cpp-stl-tuple/</guid><description><![CDATA[<p><code>std::tuple</code>是C++11开始支持的一个编译期确定长度的, 可支持任意参数类型的容器, 相当于是<code>std::pair</code>的扩展, 平常只使用过它, 却没有了解其实现原理.</p>]]></description></item><item><title>STL-any源码阅读</title><link>https://imcbc.cn/202207/cpp-stl-any/</link><pubDate>Wed, 06 Jul 2022 17:10:51 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202207/cpp-stl-any/</guid><description><![CDATA[<p><code>std::any</code>是C++17定义的支持任意可拷贝类型的标准容器. 描述如下:</p>
<blockquote>
<p>The class any describes a type-safe container for single values of any copy constructible type.</p>
</blockquote>]]></description></item><item><title>C++在给定内存上构造</title><link>https://imcbc.cn/202206/cpp_placementnew_allocator/</link><pubDate>Mon, 20 Jun 2022 09:23:15 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202206/cpp_placementnew_allocator/</guid><description>&lt;p>当初始化一个类数组的时候，有什么方法可以减少构造和复制操作呢？&lt;/p></description></item><item><title>像数学公式一样写C++代码</title><link>https://imcbc.cn/202206/mathlike-cpp/</link><pubDate>Mon, 06 Jun 2022 22:54:25 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202206/mathlike-cpp/</guid><description>&lt;p>在leetcode做题的时候，遇到如下形式的递推公式：&lt;/p></description></item><item><title>NULL和nullptr实际问题分析</title><link>https://imcbc.cn/202203/null-nullptr-problem/</link><pubDate>Mon, 21 Mar 2022 16:28:35 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202203/null-nullptr-problem/</guid><description><![CDATA[<p>在C++中推荐使用<code>nullptr</code>代表空指针，虽然我一直坚持这个原则，但是实际开发中没有遇到非<code>nullptr</code>不可的情况，直到写了以下代码（已脱敏）：</p>]]></description></item><item><title>STL-智能指针三剑客源码阅读</title><link>https://imcbc.cn/202112/stl-smartpointers/</link><pubDate>Wed, 29 Dec 2021 15:43:03 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202112/stl-smartpointers/</guid><description>&lt;p>智能指针出现很多, 但是自己用得很少. 本文从源码层面来学习智能指针, 学习是怎么实现的, 以及如此实现可以实现如何的功能.&lt;/p></description></item><item><title>explicit说明符</title><link>https://imcbc.cn/202112/cpp-explicit/</link><pubDate>Thu, 23 Dec 2021 14:03:32 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202112/cpp-explicit/</guid><description><![CDATA[<p>一直对<code>explicit</code>的认知比较模糊, 在准备智能指针内容的时候, 看到了这个内容, 所以索性认认真真学习一遍.</p>
<p>简单来说, <code>explicit</code>表达的是: 只允许显示行为, 不允许隐式行为.</p>
<p>要理解上面的解释, 就需要理解哪些是C++的显示行为, 哪些是隐式行为.</p>]]></description></item><item><title>pair的内存结构</title><link>https://imcbc.cn/202112/pair-memstruct/</link><pubDate>Tue, 14 Dec 2021 15:29:53 +0800</pubDate><author>作者</author><guid>https://imcbc.cn/202112/pair-memstruct/</guid><description><![CDATA[<h2 id="问题">问题</h2>
<p>在提交代码的时候发现了代码中的一个问题:</p>
<p>大概意思是, 有一个<code>pair</code>类型的数据, 使用如下方式打印了<code>pair</code>的<code>first</code>的数据(实际上是代码写错了, 但是依然正常工作):</p>]]></description></item></channel></rss>